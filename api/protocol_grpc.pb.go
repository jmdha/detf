// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DETF_RequestMatch_FullMethodName = "/protocol.DETF/RequestMatch"
	DETF_SendResult_FullMethodName   = "/protocol.DETF/SendResult"
)

// DETFClient is the client API for DETF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DETFClient interface {
	RequestMatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Match, error)
	SendResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
}

type dETFClient struct {
	cc grpc.ClientConnInterface
}

func NewDETFClient(cc grpc.ClientConnInterface) DETFClient {
	return &dETFClient{cc}
}

func (c *dETFClient) RequestMatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Match, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Match)
	err := c.cc.Invoke(ctx, DETF_RequestMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dETFClient) SendResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DETF_SendResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DETFServer is the server API for DETF service.
// All implementations must embed UnimplementedDETFServer
// for forward compatibility.
type DETFServer interface {
	RequestMatch(context.Context, *Empty) (*Match, error)
	SendResult(context.Context, *Result) (*Empty, error)
	mustEmbedUnimplementedDETFServer()
}

// UnimplementedDETFServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDETFServer struct{}

func (UnimplementedDETFServer) RequestMatch(context.Context, *Empty) (*Match, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMatch not implemented")
}
func (UnimplementedDETFServer) SendResult(context.Context, *Result) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedDETFServer) mustEmbedUnimplementedDETFServer() {}
func (UnimplementedDETFServer) testEmbeddedByValue()              {}

// UnsafeDETFServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DETFServer will
// result in compilation errors.
type UnsafeDETFServer interface {
	mustEmbedUnimplementedDETFServer()
}

func RegisterDETFServer(s grpc.ServiceRegistrar, srv DETFServer) {
	// If the following call pancis, it indicates UnimplementedDETFServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DETF_ServiceDesc, srv)
}

func _DETF_RequestMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DETFServer).RequestMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DETF_RequestMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DETFServer).RequestMatch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DETF_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DETFServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DETF_SendResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DETFServer).SendResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// DETF_ServiceDesc is the grpc.ServiceDesc for DETF service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DETF_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.DETF",
	HandlerType: (*DETFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestMatch",
			Handler:    _DETF_RequestMatch_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _DETF_SendResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protocol.proto",
}
